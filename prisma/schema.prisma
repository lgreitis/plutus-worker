generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByNulls"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  UserItem      UserItem[]
}

model UserItem {
  id        String   @id @default(uuid())
  dateAdded DateTime @default(now())
  buyPrice  Float?
  quantity  Int
  notes     String?

  item   Item   @relation(fields: [itemId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  itemId String
  userId String

  @@index([userId])
}

model Item {
  id                               String     @id @default(uuid())
  marketName                       String
  marketHashName                   String     @unique
  lastPrice                        Float?
  rarity                           ItemRarity
  type                             ItemType
  icon                             String
  icon_small                       String
  officialPricingHistoryUpdateTime DateTime?

  OfficialPricingHistory   OfficialPricingHistory[]
  ApiItemPrice             ApiPricingHistory[]
  UserItem                 UserItem[]
  OfficialPricingFetchTime OfficialPricingFetchTime[]
}

model OfficialPricingHistory {
  id String @id @default(uuid())

  item   Item   @relation(fields: [itemId], references: [id])
  itemId String

  date   DateTime
  price  Float
  volume Int

  @@unique([itemId, date])
  @@index([date])
  @@index([itemId])
}

model ApiPricingHistory {
  id     String @id @default(uuid())
  item   Item   @relation(fields: [itemId], references: [id])
  itemId String

  current        Float
  min            Float
  avg            Float
  max            Float
  median         Float?
  safe           Float
  soldLast24h    Float
  soldLast7d     Float
  avgDailyVolume Float?

  unstable       Boolean
  unstableReason ItemUnstableReason?

  updateTime DateTime
  fetchTime  DateTime @default(now())

  @@index([updateTime])
  @@index([current])
  @@index([itemId])
}

model OfficialPricingFetchTime {
  id           String   @id @default(uuid())
  item         Item     @relation(fields: [itemId], references: [id])
  duration     Int
  proxyCountry String
  proxyIp      String
  proxyPort    String
  itemId       String
  fetchDate    DateTime @default(now())
}

enum ItemRarity {
  Exceptional
  Master
  Superior
  BaseGrade
  Distinguished
  Covert
  IndustrialGrade
  MilSpecGrade
  Restricted
  Classified
  ConsumerGrade
  Exotic
  Extraordinary
  HighGrade
  Remarkable
  Contraband
}

enum ItemType {
  Container
  Agent
  Patch
  MusicKit
  Skin
  Sticker
  Tool
}

enum ItemUnstableReason {
  NO_SALES_WEEK
  NO_SALES_MONTH
  NO_SALES_3PLUS_MONTHS
  NO_SALES_OVERALL
  LOW_SALES_WEEK
  LOW_SALES_MONTH
  LOW_SALES_3PLUS_MONTHS
  LOW_SALES_OVERALL
}
