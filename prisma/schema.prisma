generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByNulls", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  steamid           String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  currency      String     @default("USD")
  public        Boolean    @default(true)
  accounts      Account[]
  sessions      Session[]
  Inventory     Inventory?

  fetchJobId String?
  lastFetch  DateTime?

  friendOf User[] @relation("UserFriends")
  friends  User[] @relation("UserFriends")
}

model Inventory {
  id String @id @default(uuid())

  UserItem UserItem[]

  User   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model UserItem {
  id        String   @id @default(uuid())
  dateAdded DateTime @default(now())
  buyPrice  Float?
  quantity  Int
  notes     String?

  Item           Item      @relation(fields: [marketHashName], references: [marketHashName])
  Inventory      Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  marketHashName String
  inventoryId    String

  @@unique([inventoryId, marketHashName])
  @@index([marketHashName])
}

model Item {
  id                               String     @id @default(uuid())
  marketName                       String
  marketHashName                   String     @unique
  lastPrice                        Float?
  rarity                           ItemRarity
  type                             ItemType?
  icon                             String
  icon_small                       String
  officialPricingHistoryUpdateTime DateTime?
  borderColor                      String?

  ItemStatistics                  ItemStatistics?
  OfficialPricingHistory          OfficialPricingHistory[]
  ApiItemPrice                    ApiPricingHistory[]
  UserItem                        UserItem[]
  OfficialPricingHistoryOptimized OfficialPricingHistoryOptimized[]
}

model ItemStatistics {
  id        String @id @default(uuid())
  volume24h Float
  volume7d  Float
  change24h Float
  change7d  Float
  change30d Float
  item      Item   @relation(fields: [itemId], references: [id])
  itemId    String @unique

  @@index([volume24h(sort: Desc)])
}

model OfficialPricingHistory {
  id     String   @id @default(uuid())
  date   DateTime
  price  Float
  volume Int
  item   Item     @relation(fields: [itemId], references: [id])
  itemId String

  @@unique([itemId, date])
  @@index([itemId, date(sort: Desc)])
  @@index([date])
  @@index([itemId])
}

model OfficialPricingHistoryOptimized {
  id     String   @id @default(uuid())
  date   DateTime
  price  Float
  volume Int
  item   Item     @relation(fields: [itemId], references: [id])
  itemId String

  @@unique([itemId, date])
  @@index([itemId, date(sort: Desc)])
  @@index([date])
  @@index([itemId])
}

model ApiPricingHistory {
  id     String @id @default(uuid())
  item   Item   @relation(fields: [itemId], references: [id])
  itemId String

  current        Float
  min            Float
  avg            Float
  max            Float
  median         Float?
  safe           Float
  soldLast24h    Float
  soldLast7d     Float
  soldLast30d    Float
  soldLast90d    Float
  avgDailyVolume Float?

  unstable       Boolean
  unstableReason ItemUnstableReason?

  updateTime DateTime
  fetchTime  DateTime @default(now())

  @@index([itemId, fetchTime(sort: Desc)])
  @@index([updateTime])
  @@index([current])
  @@index([itemId])
}

model FetchTime {
  id                String            @id @default(uuid())
  duration          Int
  lastProxyDuration Int?
  proxyCountry      String
  proxyIp           String
  proxyPort         String
  fetchDate         DateTime          @default(now())
  category          FetchTimeCategory
}

model ExchangeRate {
  id                 String @id @default(uuid())
  timestamp          Float
  baseCurrency       String
  conversionCurrency String
  rate               Float

  @@index([conversionCurrency])
  @@index([conversionCurrency, timestamp(sort: Desc)])
}

enum FetchTimeCategory {
  OfficialPricingHistory
  Inventory
}

enum ItemRarity {
  Exceptional
  Master
  Superior
  BaseGrade
  Distinguished
  Covert
  IndustrialGrade
  MilSpecGrade
  Restricted
  Classified
  ConsumerGrade
  Exotic
  Extraordinary
  HighGrade
  Remarkable
  Contraband
}

enum ItemType {
  Skin
  Sticker
  Container
  Collectible
  Agent
  Patch
  MusicKit
  Graffiti
  Other
}

enum ItemUnstableReason {
  NO_SALES_WEEK
  NO_SALES_MONTH
  NO_SALES_3PLUS_MONTHS
  NO_SALES_OVERALL
  LOW_SALES_WEEK
  LOW_SALES_MONTH
  LOW_SALES_3PLUS_MONTHS
  LOW_SALES_OVERALL
}
